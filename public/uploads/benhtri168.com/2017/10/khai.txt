///usr/lib/node_modules/pm2(thu muc cai dat npm)
//io.sockets.emit(server tra result ve cho tat ca moi nguoi)
//socket.emit(server tra result ve cho chinh nguoi gui)
//socket.broadcast.emit(server tra result ve cho tat ca moi nguoi ngoai tru nguoi gui len server)
//socket.adapter.rooms(show danh sach rooms dang co)
//Object.keys(io.sockets.sockets).forEach(function(id) {}) (get all ii of sockets)
//mongod.exe --config G:\MongoStore\config.txt
const http=require("http");
var express=require("express");
const mongoose=require('mongoose');
mongoose.Promise = require('bluebird');
var session=require("express-session");
var socket_io=require("socket.io");
var funs=require("./funs.js");
funs =new funs;
var funs_html=require("./funs_html.js");
funs_html =new funs_html;
var app=express();
app.use(express.static("public"));
app.set("view engine","ejs");
app.set("views","./views");
/*khoi tao cac const*/
const port=8000;
const ip='127.0.0.1';
//tao server
var server=http.Server(app);
var io=socket_io(server);
server.listen(port);
/*session*/
app.use(session({
    secret : "secret",
    saveUninitialized: true,
    resave: false,
    cookie: { maxAge: 3000000}
}));
/*mongodb*/
/*var dburl='mongodb://localhost:27017/kchat';
var db=mongoose.connect(dburl,{useMongoClient: true});
var dbMongo=mongoose.connection;
dbMongo.on('err',console.error.bind(console,'connect err'));
dbMongo.once('open',function () {
    funs.echo_log(dburl);
});*/
/*mongodb*/
var dburl='mongodb://127.0.0.1:27017/kchat';
/*var db=mongoose.connect(dburl, { useMongoClient: true });
var dbMongo=mongoose.connection;
dbMongo.on('error',console.error.bind(console,'connect err'));
dbMongo.once('open',function () {
    console.log('ket noi database | '+dburl);
});*/
var options_db = {
    db: { native_parser: true },
    server: { poolSize: 5 }
}
//use native promises
mongoose.Promise=global.Promise;
/*mongoose.connect(dburl, options_db).then (
    () => {
    console.log('ket noi thanh cong');
}, err =>{
    console.log('ket noi that bai');
}
);*/
mongoose.connect(dburl, options_db, function(error) {
    if(error){
        console.log('loi ket noi');
    }else{
        console.log('ket noi thanh cong');
    }
});
mongoose.set("debug",true);
var timenow=new Date();
require("./models/k_messages");
var model_messages= mongoose.model("k_messages");
require("./models/k_sockets");
const model_sockets=mongoose.model("k_sockets");
function getCid(){
    var Arr={"cid":1,domains:['benhtri168.com']};
    return Arr;
}
io.on("connection",function (socket){
    /*var clientIp = socket.request.connection.remoteAddress;*/
    /*console.log('ip k?t n?i:'+clientIp);*/
    console.log('ket noi socket.io | '+socket.id);
    socket.on('online',function(data){
        var documents={};
        documents.soc_id=socket.id;
        documents.use_ip='';
        documents.use_cid=data.cid;
        documents.use_sid=data.sid;
        documents.use_domain=data.domain;
        documents.use_device=data.device;
        documents.use_channel=data.channel;
        documents.use_group=data.group+'|'+socket.id;
        documents.created_at=timenow;
        documents.updated_at=timenow;
        var _condition={ "soc_id":data.id};
        var _update=documents;
        var _option={upsert: true};

        if(1==1){
            /*model_sockets.find(function(err,soc,asdfa){
                res.send(soc);
                console.log('khainv online');
            });*/
            model_sockets.create(documents, function (err, small) {
                if (err) {
                    return handleError(err);
                    cosole.log('co loi');
                }
                console.log('saved ! ' + JSON.stringify(model_sockets))
            })
        }
        /*model_sockets.findOneAndUpdate(
            *//*{ "soc_id":data.id},{$set:documents},{upsert: true},function(err,doc) {*//*
            _condition,_update,_option,function(err,doc) {
                if(err){
                    console.log(err);
                    throw err;
                    var str='index/on.online | data : '+documents;
                    funs.write_log(str);
                }else{
                    console.log("da them new");
                }
            }
        );*/
    })
    socket.on('C_send_mes',function(data){
        var documents={};
        documents.mes_text=funs.escapeHtml(data.txt);
        documents.socket_id=data.id;
        documents.socket_room=data.id;
        documents.use_ip=data.ip;
        documents.use_os=data.os;
        documents.use_browser=data.browser;
        documents.use_channel=data.channel;
        documents.use_icon=escape(data.icon);
        documents.use_type=data.use_type;
        documents.use_domain=escape(data.domain);
        documents.use_cid=data.cid;
        documents.created_at=timenow;
        documents.updated_at=timenow;
        model_messages.findOneAndUpdate(
            { "mes_text":documents.mes_text},{$set:documents},{upsert: true},function(err,doc) {
                if(err){
                    throw err;
                    console.log('loi | '+documents);
                }else{
                    console.log("da them new");
                }
            }
        );
    })
    socket.on('disconnect',function(){
        var id=socket.id;
        model_sockets.remove({soc_id: id}, function(err, result) {
            if (err) {
                var str='index/disconnect | id : '+id;
                funs.write_log(str);
            }else{
                console.log('xoa thanh cong'+id);
            }
        });
        funs.echo_log('disconnect : '+socket.id);
    });
});
/*tao namespace*/
var nsp=io.of('/khainv');
nsp.on('connection', function(socket){
    console.log('namspace khainv:');
    console.log(socket.id);
});
/*routers*/
var rooms=require("./routers/frontend/rooms");
var kchat=require("./routers/kchat/kchat");
/*var ajax=require("./routers/frontend/ajax");*/
app.use('/',rooms);
app.use('/kchat',kchat);
/*app.use('/ajax',ajax);*/
